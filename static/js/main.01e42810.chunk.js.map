{"version":3,"sources":["model/common/ModelObject.ts","model/common/ModelField.ts","view/common/generics/ErrorForm.tsx","model/common/ModelConstraints.ts","utils/validation/StringValidation.ts","view/common/elementary/PrometeusWidgetTextInput.tsx","model/specific/Personne.ts","view/common/complex/array/subelements/CustomTableControler.tsx","view/common/complex/array/subelements/CustomTableHeaders.tsx","utils/FieldUtils.ts","view/common/complex/array/subelements/CustomTableBody.tsx","view/common/complex/array/PrometeusWidgetTable.tsx","utils/validation/GenericValidation.ts","ModelSimulation.ts","Home.tsx","serviceWorker.ts","index.tsx"],"names":["EObjectType","getNaturalValuesToString","naturalKey","values","forEach","element","push","value","join","createObject","objectType","naturalKeys","key","type","naturalKeysFields","Object","keys","EStringInputType","defaultModelField","createField","ModelObject","NUMBER","name","parent","stringNaturalKey","labelKey","ErrorForm","EConstraintsType","props","errors","length","isValid","constraint","minSize","maxSize","regexp","isMinSizeValid","isMaxSizeValid","RegExp","test","isRegexpValid","isMandatory","PrometeusWidgetTextInput","field","constraints","useState","defaultValue","setErrors","useEffect","TextField","label","error","required","id","inputType","onChange","undefined","helperText","Chance","require","getDefaultNaturalKeys","nom","prenom","defaultNom","defaultPrenom","age","email","ModelField","PROMETEUS_OBJECT","createNomField","createPrenomField","createAgeField","createEmailField","STRING","TEXT","EMAIL","inputField","SEARCH","CustomTableControler","headers","setValue","showForm","setShowForm","style","display","flexDirection","justifyContent","alignItems","Select","labelId","e","newValue","target","onItemChanged","map","MenuItem","onNewSearch","width","onClick","onDelete","className","onAdd","chance","last","first","Personne","formulaireToOpen","CustomTableHeaders","activeSorting","setActiveSorting","isAscending","setIsAscending","getAscending","header","ascending","TableHead","TableRow","TableCell","TableSortLabel","active","direction","onSort","getAttributesNameFromObject","object","getOwnPropertyDescriptors","getDeltaAttributes","objectToDisplay","referenceObject","objectAttributes","defaultAttributes","Map","entries","indexOf","set","getValueFromFieldName","fieldName","gettedItem","getValidStyle","backgroundColor","getSelectedStyle","isSelected","border","CustomTableBody","model","TableBody","onSelection","attributes","rows","has","get","getOrderedRows","item","index","createTableItem","itemErrors","StringValidation","concat","PrometeusWidgetTable","displayHeaders","reference","filter","getDeltaAttributesNameFromModel","converted","convertModelToTableItems","setValues","displayValues","setDisplayValues","search","setSearch","searchItem","setSearchItem","sort","setSort","rowTable","headerToSearch","itemsToSearch","headerToSort","newDisplay","toString","includes","a","b","valueA","valueB","generateDisplay","console","log","padding","copyValues","Table","newSort","newIsAscending","personneFieldList","Rick","imageDisplay","Vador","Punisher","Bender","childrens","Home","ModelSimulation","Button","Avatar","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.01e42810.chunk.js","sourcesContent":["export enum EObjectType {\r\n    STRING = 'string',\r\n    NUMBER = 'number',\r\n    PROMETEUS_OBJECT = 'prometeus_object'\r\n}\r\n\r\nexport interface IModelObject {\r\n    key: string,\r\n    type: EObjectType,\r\n    naturalKeysFields: Array<string>\r\n}\r\n\r\nexport type PrimitiveType = number | string | boolean;\r\n\r\nexport interface INaturalKey {\r\n    name: string, \r\n    value?: any\r\n}\r\n\r\nexport function getNaturalValuesToString(naturalKey: Array<INaturalKey>) : string {\r\n    const values: Array<string> = [];\r\n\r\n    naturalKey.forEach((element: INaturalKey) => {\r\n        values.push(element.value ? element.value : 'undefined');\r\n    });\r\n\r\n    return values.join('_');\r\n}\r\n\r\nexport function createObject(objectType: EObjectType, naturalKeys: Array<INaturalKey>): IModelObject {\r\n    return {\r\n        key: `${naturalKeys ? getNaturalValuesToString(naturalKeys) : 'undefinedNaturalKey'}`,\r\n        type: objectType,\r\n        naturalKeysFields: Object.keys(naturalKeys)\r\n    };\r\n}\r\n","import * as ModelObject from './ModelObject';\r\nimport { AbstractConstraint } from './ModelConstraints';\r\nimport * as Constraints from './ModelConstraints';\r\n\r\nexport const defaultModelField = createField(ModelObject.EObjectType.NUMBER, [{name : ''}]);\r\n\r\nexport interface IModelField extends ModelObject.IModelObject {\r\n    labelKey: string,\r\n    defaultValue?: any,\r\n    constraints?: AbstractConstraint,\r\n    value?: any\r\n}\r\n\r\nexport enum EStringInputType {\r\n    DATE = 'date',\r\n    DATETIME = 'datetime-local',\r\n    EMAIL = 'email',\r\n    FILE = 'file',\r\n    NUMBER = 'number',\r\n    PASSWORD = 'password',\r\n    SEARCH = 'search',\r\n    TEL = 'tel',\r\n    TEXT = 'text',\r\n    TIME = 'time',\r\n    URL = 'url'\r\n}\r\n\r\nexport interface IStringField extends IModelField {\r\n    constraints: Constraints.IStringConstraint,\r\n    defaultValue?: string,\r\n    inputType: EStringInputType,\r\n    value?: string\r\n}\r\n\r\nexport interface INumericField extends IModelField {\r\n    constraints: Constraints.IStringConstraint,\r\n    defaultValue?: number,\r\n    value?: number\r\n}\r\n\r\nexport function createField(objectType: ModelObject.EObjectType, naturalKey: Array<ModelObject.INaturalKey>, parent?: string): IModelField {\r\n    const stringNaturalKey = ModelObject.getNaturalValuesToString(naturalKey);\r\n\r\n    return {\r\n        ...ModelObject.createObject(objectType, naturalKey),\r\n        labelKey: parent? `${parent}_${stringNaturalKey}` : stringNaturalKey\r\n    };\r\n}\r\n","import { EConstraintsType } from '../../../model/common/ModelConstraints';\r\n\r\ninterface inputProps {\r\n    errors: Array<EConstraintsType>,\r\n}\r\n\r\nfunction ErrorForm(props: inputProps): string {\r\n\r\n    const { errors } = props;\r\n\r\n    return (\r\n        errors.length !== 0 ? `Detected errors: ${errors}` : ''\r\n    );\r\n}\r\n\r\nexport default ErrorForm;\r\n","export enum EConstraintsType {\r\n    isMandatory = 'isMandatory',\r\n    minSize = 'minSize',\r\n    maxSize = 'maxSize',\r\n    regexp = 'regexp'\r\n}\r\n\r\nexport interface AbstractConstraint {\r\n    [EConstraintsType.isMandatory]: boolean\r\n}\r\n\r\nexport interface IStringConstraint extends AbstractConstraint{\r\n    [EConstraintsType.minSize]?: number,\r\n    [EConstraintsType.maxSize]?: number,\r\n    [EConstraintsType.regexp]?: string\r\n}\r\n","import { EConstraintsType, IStringConstraint } from '../../model/common/ModelConstraints';\r\n\r\nexport function isValid(constraint: IStringConstraint, value: string | undefined): Array<EConstraintsType> {\r\n    let {minSize, maxSize, regexp} = constraint;\r\n\r\n    let errors: Array<EConstraintsType> = [];\r\n \r\n    if(value){\r\n        if(!isMinSizeValid(minSize, value)){\r\n            errors.push(EConstraintsType.minSize);\r\n        }\r\n\r\n        if(!isMaxSizeValid(maxSize, value)){\r\n            errors.push(EConstraintsType.maxSize);\r\n        }\r\n\r\n        if(!isRegexpValid(regexp, value)){\r\n            errors.push(EConstraintsType.regexp);\r\n        }\r\n    } else {\r\n        if(constraint.isMandatory) {\r\n            errors.push(EConstraintsType.isMandatory);\r\n        }\r\n    }\r\n\r\n    return errors;\r\n}\r\n\r\nfunction isMinSizeValid(minSize: number | undefined, value: string): boolean {\r\n    return minSize ? value.length >= minSize : true;\r\n}\r\n\r\nfunction isMaxSizeValid(maxSize: number | undefined, value: string): boolean {\r\n    return maxSize ? value.length <= maxSize : true;\r\n}\r\n\r\nfunction isRegexpValid(regexp: string | undefined, value: string): boolean {\r\n    return regexp ? RegExp(regexp).test(value) : true;\r\n}","import React, { useEffect, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport ErrorForm from '../generics/ErrorForm';\r\n\r\nimport * as ModelField from '../../../model/common/ModelField';\r\nimport { isValid } from '../../../utils/validation/StringValidation';\r\nimport { EConstraintsType } from '../../../model/common/ModelConstraints';\r\n\r\ninterface inputProps {\r\n    field: ModelField.IStringField,\r\n    onChange?: (event : React.ChangeEvent<HTMLInputElement>) => void\r\n }\r\n\r\nfunction PrometeusWidgetTextInput(props: inputProps): JSX.Element {\r\n    \r\n    const { field } = props;\r\n    const { constraints } = field;\r\n\r\n    const [value, setValue] = useState<string>(field.defaultValue ? field.defaultValue : '');\r\n    const [errors, setErrors] = useState<Array<EConstraintsType>>(isValid(constraints, value));\r\n\r\n    useEffect(() => {\r\n        setErrors(isValid(constraints, value));\r\n    }, [value]);\r\n\r\n    return (\r\n        <>\r\n            <TextField \r\n                label = {field.labelKey}\r\n                error = {errors.length !== 0}\r\n                required = {constraints.isMandatory}\r\n                id = {`${field.key}_value`} \r\n                type = {field.inputType ? field.inputType : 'text'}\r\n                defaultValue = {value}\r\n                onChange = { props.onChange ? props.onChange : undefined }\r\n                helperText = { ErrorForm({errors}) }\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PrometeusWidgetTextInput;","import * as ModelObject from '../common/ModelObject';\r\nimport * as ModelField from '../common/ModelField';\r\n\r\nconst Chance = require('chance');\r\n\r\nexport function generate(): IPersonneField {\r\n    const chance = new Chance();\r\n    return createField(chance.last(), chance.first(), chance.age(), chance.email());\r\n}\r\n\r\nexport interface IPersonne extends ModelObject.IModelObject {\r\n    nom: string, \r\n    prenom: string,\r\n    age?: number,\r\n    email?: string\r\n}\r\n\r\nexport interface IPersonneField extends ModelField.IModelField {\r\n    nom: ModelField.IStringField,\r\n    prenom: ModelField.IStringField,\r\n    age: ModelField.INumericField,\r\n    email: ModelField.IStringField\r\n}\r\n\r\nfunction getDefaultNaturalKeys(nom?: string, prenom?: string){\r\n    return {\r\n        defaultNom: nom ? nom : 'nom',\r\n        defaultPrenom: prenom ? prenom : 'prenom'\r\n    };\r\n}\r\n\r\nexport function createObject(nom?: string, prenom?: string, age?: number, email?: string): IPersonne {\r\n    const { defaultNom, defaultPrenom } = getDefaultNaturalKeys(nom, prenom);\r\n\r\n    return {\r\n        nom: defaultNom,\r\n        prenom: defaultPrenom,\r\n        ...ModelObject.createObject(ModelObject.EObjectType.PROMETEUS_OBJECT, [\r\n            {\r\n                name: 'nom',\r\n                value: defaultNom\r\n            },\r\n            {\r\n                name: 'prenom',\r\n                value: defaultPrenom\r\n            }\r\n        ]),\r\n\r\n        age: age ? age : 0,\r\n        email: email ? email : ''\r\n    };\r\n}\r\n\r\nexport function createField(nom?: string, prenom?: string, age?: number, email?: string): IPersonneField {\r\n    const { defaultNom, defaultPrenom } = getDefaultNaturalKeys(nom, prenom);\r\n    \r\n    return {\r\n        ...ModelField.createField(ModelObject.EObjectType.PROMETEUS_OBJECT, [\r\n            {\r\n                name: 'nom',\r\n                value: defaultNom\r\n            },\r\n            {\r\n                name: 'prenom',\r\n                value: defaultPrenom\r\n            }\r\n        ]),\r\n        nom: createNomField(nom),\r\n        prenom: createPrenomField(prenom),\r\n        age: createAgeField(age),\r\n        email: createEmailField(email)\r\n    };\r\n}\r\n\r\nfunction createNomField(nom?: string): ModelField.IStringField{\r\n    return {\r\n        ...ModelField.createField(ModelObject.EObjectType.STRING, [{name : 'nom'}], 'personne'),\r\n        inputType: ModelField.EStringInputType.TEXT,\r\n        constraints: {\r\n            isMandatory: true,\r\n            minSize:5\r\n        },\r\n        value: nom ? nom : undefined\r\n    };\r\n}\r\n\r\nfunction createPrenomField(prenom?: string): ModelField.IStringField{\r\n    return {\r\n        ...ModelField.createField(ModelObject.EObjectType.STRING, [{name : 'prenom'}], 'personne'),\r\n        inputType:  ModelField.EStringInputType.TEXT,\r\n        constraints: {\r\n            isMandatory: false,\r\n            maxSize: 15\r\n        },\r\n        value: prenom ? prenom : undefined\r\n    };\r\n}\r\n\r\nfunction createAgeField(age?: number): ModelField.INumericField{\r\n    return {\r\n        ...ModelField.createField(ModelObject.EObjectType.NUMBER, [{name : 'age'}], 'personne'),\r\n        constraints: {\r\n            isMandatory: false\r\n        },\r\n        value: age ? age : undefined\r\n    }\r\n}\r\n\r\nfunction createEmailField(email?: string): ModelField.IStringField{\r\n    return {\r\n        ...ModelField.createField(ModelObject.EObjectType.STRING, [{name : 'email'}], 'personne'),\r\n        inputType:  ModelField.EStringInputType.EMAIL,\r\n        constraints: {\r\n            isMandatory: false\r\n        },\r\n        value: email ? email : undefined\r\n    };\r\n}\r\n","import React, {useState} from 'react';\r\nimport { IStringField, EStringInputType, IModelField } from '../../../../../model/common/ModelField';\r\nimport { EObjectType } from '../../../../../model/common/ModelObject';\r\nimport PrometeusWidgetTextInput from '../../../elementary/PrometeusWidgetTextInput';\r\n\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Select from '@material-ui/core/Select';\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Icon from '@material-ui/icons/Add';\r\n\r\nimport * as Personne from '../../../../../model/specific/Personne';\r\n\r\nconst inputField: IStringField = {\r\n    key: 'search',\r\n    type: EObjectType.STRING,\r\n    naturalKeysFields: ['search'],\r\n    labelKey: 'search',\r\n    inputType: EStringInputType.SEARCH,\r\n    constraints: {\r\n        isMandatory: false\r\n    }\r\n}\r\n\r\ninterface inputProps {\r\n    onNewSearch: (search: string) => void,\r\n    onItemChanged: (search: string) => void,\r\n\r\n    onAdd: (element: IModelField) => void,\r\n    formulaireToOpen?: JSX.Element;\r\n\r\n    onDelete: () => void,\r\n\r\n    headers: Array<string>\r\n}\r\n\r\nexport function CustomTableControler(props: inputProps): JSX.Element {\r\n    const [value, setValue] = useState(props.headers[0]);\r\n    const [showForm, setShowForm] = useState(false);\r\n\r\n    function onItemChanged(e: React.ChangeEvent<any>){\r\n        const newValue: string = e.target.value;\r\n        setValue(newValue)\r\n        props.onItemChanged(newValue);\r\n    }\r\n\r\n    function changeForm(){\r\n        let isShow = showForm;\r\n        setShowForm(!isShow);\r\n    }\r\n\r\n    function onAdd(){\r\n        setShowForm(false);\r\n        props.onAdd(Personne.generate());\r\n    }\r\n\r\n    return (\r\n        <div key = {'table_controller'} style = {{\r\n            display: 'flex',           \r\n            flexDirection: 'row',\r\n            justifyContent: 'space-between',\r\n            alignItems: 'flex-end'\r\n        }}>\r\n            <Select\r\n                labelId=\"demo-simple-select-label\"\r\n                id=\"demo-simple-select\"\r\n                value={value}\r\n                onChange = {onItemChanged}\r\n            >\r\n                {\r\n                    props.headers.map((element) => {\r\n                        return <MenuItem key = {element} value = {element}>{element}</MenuItem>   \r\n                    })\r\n                }\r\n            </Select>\r\n            <PrometeusWidgetTextInput field = {inputField} onChange = {(e) => {props.onNewSearch(e.target.value)}}/>\r\n\r\n            <div style = {\r\n                {    \r\n                    width: '80px',\r\n                    display: 'flex',\r\n                    justifyContent: 'space-around',\r\n                }\r\n            }>\r\n                <DeleteIcon onClick={props.onDelete}/>\r\n                <Icon className=\"fa fa-plus-circle\" onClick={changeForm}>add_circle</Icon>\r\n                {\r\n                    showForm ? \r\n                        <div onClick = {onAdd}>\r\n                            {props.formulaireToOpen} \r\n                        </div>\r\n                        : undefined\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CustomTableControler;","import React, { useState } from 'react';\r\n\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\n\r\ninterface inputProps {\r\n    headers: Array<string>,\r\n    onSort: (header: string, isAscending: boolean) => void\r\n}\r\n\r\ntype ascendingType = 'asc' | 'desc';\r\n\r\nfunction CustomTableHeaders(props: inputProps): JSX.Element {\r\n    const [activeSorting, setActiveSorting] = useState<string>(props.headers[0]);\r\n    const [isAscending, setIsAscending] = useState<boolean>(true);\r\n\r\n    function onSort(header: string){\r\n        if(activeSorting !== header){\r\n            setIsAscending(true);\r\n            setActiveSorting(header);\r\n        } else {\r\n            setIsAscending(!isAscending);\r\n        }\r\n\r\n        props.onSort(activeSorting, isAscending);\r\n    }\r\n\r\n    function getAscending(header: string):  ascendingType{\r\n        let ascending: ascendingType = 'asc';\r\n\r\n        if(activeSorting === header && !isAscending) {\r\n            ascending = 'desc';\r\n        }\r\n\r\n        return ascending;\r\n    }\r\n\r\n    return (\r\n        <TableHead>\r\n            <TableRow>\r\n                {\r\n                    props.headers.map((header: string) => {\r\n                        return (\r\n                            <TableCell\r\n                                key = {`table_header_${header}`}\r\n                            >\r\n                                <TableSortLabel\r\n                                    active={activeSorting === header}\r\n                                    direction={getAscending(header)}\r\n                                    onClick={() => {onSort(header)}}\r\n                                />\r\n                                {header} \r\n                            </TableCell>\r\n                        );\r\n                    })\r\n                }\r\n            </TableRow>\r\n        </TableHead>\r\n    );\r\n}\r\n\r\nexport default CustomTableHeaders;","import { IModelField, defaultModelField } from '../model/common/ModelField';\r\nimport { IModelObject } from '../model/common/ModelObject';\r\n\r\nexport function getAttributesNameFromObject(object: IModelObject): Array<string>{\r\n    return Object.keys(Object.getOwnPropertyDescriptors(object));\r\n}\r\n\r\nexport function getAttributesValuesFromObject(object: IModelObject): Array<any>{\r\n    return Object.values(Object.getOwnPropertyDescriptors(object));\r\n}\r\n\r\nfunction getDelta(object: Array<any>, reference: Array<any>) : Array<any>{\r\n    return object.filter((element: any) => {\r\n        return reference.indexOf(element) === -1;\r\n    });\r\n}\r\n\r\nexport function getDeltaAttributesNameFromModel(objectToDisplay: IModelField): Array<string> {\r\n    const objectAttributes: Array<string> = getAttributesNameFromObject(objectToDisplay);\r\n    const defaultAttributes: Array<string> = getAttributesNameFromObject(defaultModelField);\r\n\r\n    return getDelta(objectAttributes, defaultAttributes);\r\n}\r\n\r\nexport function getDeltaAttributes(objectToDisplay: IModelField, referenceObject: IModelField): Map<string, any> {\r\n    const objectAttributes = Object.getOwnPropertyDescriptors(objectToDisplay);    \r\n    const defaultAttributes: Array<string> = getAttributesNameFromObject(referenceObject);\r\n    const naturalKeys: Map<string, any> = new Map();\r\n\r\n    for(const [key, value] of Object.entries(objectAttributes)) {\r\n        if(defaultAttributes.indexOf(key) === -1){\r\n            naturalKeys.set(key, value);\r\n        }\r\n    }\r\n\r\n    return naturalKeys;\r\n}\r\n\r\nexport function getValueFromFieldName(objectToDisplay: IModelField, fieldName: string): any{\r\n    const objectAttributes = Object.getOwnPropertyDescriptors(objectToDisplay);\r\n    let gettedItem: any = null;\r\n\r\n    for(const [key, value] of Object.entries(objectAttributes)) {\r\n        if(key === fieldName){\r\n            gettedItem = value;\r\n            break;\r\n        }\r\n    }\r\n\r\n    return gettedItem.value;\r\n}","import React from 'react';\r\nimport { defaultModelField, IModelField } from '../../../../../model/common/ModelField';\r\n\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport { getDeltaAttributes } from '../../../../../utils/FieldUtils';\r\nimport { ITableItem } from '../PrometeusWidgetTable';\r\n\r\ninterface inputProps {\r\n    model: Array<ITableItem>,\r\n    headers: Array<string>,\r\n    onSelection: (element: ITableItem) => void\r\n}\r\n\r\nfunction getOrderedRows(element: IModelField, headers: Array<string>): Array<IModelField> {\r\n    const attributes:  Map<string, any> = getDeltaAttributes(element, defaultModelField);\r\n    const rows: Array<IModelField> = [];\r\n\r\n    headers.forEach((header) => {\r\n        if(attributes.has(header)){\r\n            rows.push(attributes.get(header));\r\n        }\r\n    });\r\n\r\n    return rows;\r\n}\r\n\r\nfunction getValidStyle(isValid: boolean){\r\n    return isValid ? {backgroundColor: 'lightgreen'} : {backgroundColor: 'lightpink'};\r\n}\r\n\r\nfunction getSelectedStyle(isSelected: boolean){\r\n    return  isSelected ? {border: '5px solid blue'} : {border: ''}\r\n}\r\n\r\nfunction CustomTableBody(props: inputProps): JSX.Element {\r\n    const { model, headers } = props;\r\n\r\n    return (\r\n        <TableBody>\r\n            {\r\n                model.map((element: ITableItem) => {\r\n                    const { model, isValid, isSelected } = element;\r\n                    return (\r\n                        <TableRow\r\n                            key={model.key}\r\n                            onClick={() => {props.onSelection(element)}}\r\n                            style = {\r\n                                {...getValidStyle(isValid), ...getSelectedStyle(isSelected)}                               \r\n                            }\r\n                        > \r\n                            {\r\n                                getOrderedRows(model, headers).map((item: IModelField, index: number) => {\r\n                                    return (\r\n                                        item ? \r\n                                            <TableCell \r\n                                                key={`${model.key}_${index}`}\r\n                                            >\r\n                                                {item.value.value}\r\n                                            </TableCell>\r\n                                        :  <TableCell key={`${model.key}_${index}`}></TableCell>\r\n                                    );\r\n                                })\r\n                            }\r\n                        </TableRow>   \r\n                    );\r\n                })\r\n            }\r\n        </TableBody>\r\n    );\r\n}\r\n\r\nexport default CustomTableBody;","import React, {useEffect, useState} from 'react';\r\n\r\nimport { IModelField } from '../../../../model/common/ModelField';\r\n\r\nimport Table from '@material-ui/core/Table';\r\n\r\nimport CustomTableControler from './subelements/CustomTableControler';\r\nimport CustomTableHeaders from './subelements/CustomTableHeaders';\r\nimport CustomTableBody from './subelements/CustomTableBody';\r\n\r\nimport { getDeltaAttributesNameFromModel } from '../../../../utils/FieldUtils';\r\nimport { EConstraintsType } from '../../../../model/common/ModelConstraints';\r\nimport isValid from '../../../../utils/validation/GenericValidation';\r\nimport { getValueFromFieldName } from '../../../../utils/FieldUtils';\r\n\r\nexport interface inputProps {\r\n    model: Array<IModelField>;\r\n    headers?: Array<string>;\r\n    formulaireToOpen?: JSX.Element;\r\n    setErrors: (errors: Array<EConstraintsType>) => void\r\n}\r\n\r\nexport interface ITableItem{\r\n    model: IModelField,\r\n    isSelected: boolean,\r\n    errors: Array<EConstraintsType>,\r\n    isValid: boolean\r\n}\r\n\r\nfunction createTableItem(element: IModelField): ITableItem {\r\n    const itemErrors: Array<EConstraintsType> = isValid(element);\r\n\r\n    return {\r\n        model: element,\r\n        isSelected: false,\r\n        errors: itemErrors,\r\n        isValid: itemErrors.length === 0\r\n    };\r\n}\r\n\r\nfunction convertModelToTableItems(model: Array<IModelField>): Array<ITableItem>{\r\n    const converted: Array<ITableItem> = [];\r\n    \r\n    model.forEach((element: IModelField) => {\r\n        converted.push(createTableItem(element));\r\n    });\r\n\r\n    return converted;\r\n}\r\n\r\nfunction generateDisplay(rowTable: Array<ITableItem>, headerToSearch: string, itemsToSearch: string, headerToSort: string, isAscending: boolean): Array<ITableItem>{\r\n    const newDisplay: Array<ITableItem> = [];\r\n\r\n    rowTable.forEach((element: ITableItem) => {\r\n        const value = getValueFromFieldName(element.model, headerToSearch).value;\r\n\r\n        if(value && value.toString().includes(itemsToSearch)){\r\n            newDisplay.push(element);\r\n        }\r\n    });\r\n\r\n    newDisplay.sort((a: ITableItem, b: ITableItem) => {\r\n        let order: number = -1;\r\n        const valueA: any = getValueFromFieldName(a.model, headerToSort).value;\r\n        const valueB: any = getValueFromFieldName(b.model, headerToSort).value;\r\n\r\n        if(isAscending){\r\n            order = valueA > valueB ? -1 : 1;\r\n        } else {\r\n            order = valueA < valueB ? -1 : 1;\r\n        }\r\n\r\n        return order;\r\n    });\r\n\r\n    return newDisplay;\r\n}\r\n\r\nfunction PrometeusWidgetTable(props: inputProps): JSX.Element {\r\n    const { model, headers } = props;\r\n    const displayHeaders: string[] = headers ? headers : getDeltaAttributesNameFromModel(model[0]);\r\n\r\n    const [values, setValues] = useState<Array<ITableItem>>(convertModelToTableItems(model));\r\n    const [displayValues, setDisplayValues] = useState<Array<ITableItem>>(values);\r\n\r\n    const [search, setSearch] = useState<string>('');\r\n    const [searchItem, setSearchItem] = useState<string>(displayHeaders[0]);\r\n\r\n    const [sort, setSort] = useState<string>(displayHeaders[0]);\r\n    const [isAscending, setIsAscending] = useState<boolean>(true);\r\n\r\n    useEffect(()=>{        \r\n        setDisplayValues(generateDisplay(values, searchItem, search, sort, isAscending));\r\n    }, [search, searchItem, values, sort, isAscending]);\r\n\r\n    useEffect(() => {\r\n        let errors: Array<EConstraintsType> = [];\r\n\r\n        values.forEach((element: ITableItem) => {\r\n            if(!element.isValid){\r\n                errors = errors.concat(element.errors);\r\n            }\r\n        });\r\n\r\n        props.setErrors(errors);\r\n        console.log(values)\r\n    }, [values]);\r\n\r\n    function onAdd(element: IModelField){\r\n        const newValue = [...values, createTableItem(element)];\r\n        setValues(newValue);\r\n    }\r\n\r\n    function onSelect(element: ITableItem){\r\n        const newValue = [...values];\r\n\r\n        newValue.forEach((item) => {\r\n            if(item.model.key === element.model.key){\r\n                item.isSelected = !item.isSelected;\r\n            }\r\n        });\r\n\r\n        setValues(newValue);\r\n    }\r\n\r\n    function onSort(newSort: string, newIsAscending: boolean){\r\n        setSort(newSort);\r\n        setIsAscending(newIsAscending);\r\n    }\r\n\r\n    function onDelete(){\r\n        const copyValues = [...values];\r\n        const newValue: Array<ITableItem> = [];\r\n\r\n        copyValues.forEach((item) => {\r\n            if(!item.isSelected){\r\n                newValue.push(item);\r\n            }\r\n        });\r\n\r\n        setValues(newValue);\r\n    }\r\n\r\n    return (\r\n        <div style = {\r\n            {\r\n                border: '3px solid black',\r\n                padding: '5px'\r\n            }\r\n        }>\r\n            <CustomTableControler \r\n                onNewSearch = {setSearch} \r\n                onItemChanged = {setSearchItem}\r\n                headers = {displayHeaders}\r\n\r\n                onAdd = {onAdd}\r\n                formulaireToOpen = {props.formulaireToOpen}\r\n\r\n                onDelete = {onDelete}\r\n            />\r\n            <Table>\r\n                <CustomTableHeaders headers = {displayHeaders} onSort = {onSort}/>\r\n                <CustomTableBody model = {displayValues} headers = {displayHeaders} onSelection = {onSelect}/>\r\n            </Table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PrometeusWidgetTable;","import { IModelField, defaultModelField } from '../../model/common/ModelField';\r\nimport { EObjectType } from '../../model/common/ModelObject';\r\nimport { EConstraintsType } from '../../model/common/ModelConstraints';\r\n\r\nimport { getDeltaAttributes } from '../../utils/FieldUtils';\r\nimport * as StringValidation from './StringValidation';\r\n\r\nexport default function isValid(object: IModelField): Array<EConstraintsType> {\r\n    let errors: Array<EConstraintsType> = [];\r\n\r\n    switch(object.type){\r\n        case EObjectType.STRING:\r\n            errors = object.constraints ? StringValidation.isValid(object.constraints, object.value) : [];\r\n            break;\r\n        case EObjectType.NUMBER:\r\n            break;\r\n        default:\r\n        case EObjectType.PROMETEUS_OBJECT:\r\n            getDeltaAttributes(object, defaultModelField).forEach((item: IModelField, key: string) => {\r\n                errors = errors.concat(item ? isValid(item.value) : []);\r\n            });\r\n            break;\r\n    } \r\n\r\n    return errors;\r\n}\r\n","import { IPersonneField, createField } from './model/specific/Personne';\r\nimport { IHierarchicalElement } from './view/common/complex/hierarchical/PrometeusWidgetHierarchical';\r\n\r\nexport const personne: IPersonneField = createField();\r\n\r\nexport const personneFieldList: Array<IPersonneField> = [\r\n  {\r\n    ...createField('totota', 'maniol'),\r\n  },   {\r\n    ...createField('tatata', 'manual'),\r\n  },   {\r\n    ...createField('titi', 'manual'),\r\n  }, \r\n];\r\n\r\nlet Rick: IHierarchicalElement = { \r\n  key: 'rick',\r\n  name: 'Rick',\r\n  imageDisplay: '/avatars/icons8-rick-sanchez-24.png'\r\n};\r\n\r\nconst Vador: IHierarchicalElement = {\r\n  key: 'vador',\r\n  name: 'Dark Vador',\r\n  imageDisplay: '/avatars/icons8-dark-vador-24.png',\r\n  parent: Rick\r\n};\r\n\r\nlet Punisher: IHierarchicalElement = {\r\n  key: 'punisher',\r\n  name: 'Punisher',\r\n  imageDisplay: '/avatars/icons8-punisher-24.png',\r\n  parent: Rick\r\n};\r\n\r\nconst Bender: IHierarchicalElement = {\r\n  key: 'bender',\r\n  name: 'Bender',\r\n  imageDisplay: '/avatars/icons8-futurama-bender-24.png',\r\n  parent: Punisher\r\n};\r\n\r\nPunisher = {...Punisher, childrens: [Bender]}\r\nRick = {...Rick, childrens: [Vador, Punisher]};\r\n\r\nexport const hierarchicalElements: Array<IHierarchicalElement> = [\r\n  Rick, Vador, Punisher, Bender\r\n]","import React, { useState } from 'react';\r\n\r\nimport { EConstraintsType } from './model/common/ModelConstraints';\r\n\r\nimport PrometeusWidgetTable from './view/common/complex/array/PrometeusWidgetTable';\r\nimport PrometeusWidgetHierarchical from './view/common/complex/hierarchical/PrometeusWidgetHierarchical';\r\nimport PrometeusWidgetTextInput from './view/common/elementary/PrometeusWidgetTextInput';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport * as ModelSimulation from './ModelSimulation';\r\n\r\nfunction Home() {\r\n  //<PrometeusWidgetTextInput field={personne.nom}></PrometeusWidgetTextInput>\r\n  //<PrometeusWidgetHierarchical elements = {hierarchicalElements} onClick = {(e: IHierarchicalElement) => console.log(e)}></PrometeusWidgetHierarchical>\r\n\r\n  const [errors, setErrors] = useState<Array<EConstraintsType>>([]);\r\n\r\n  console.log(ModelSimulation.personneFieldList)\r\n\r\n  return (\r\n    <div>\r\n      <h1>Prometeus application test</h1>\r\n      <Button onClick={() => {console.log('Array errors: ', errors)}}>Display errors</Button>\r\n      <PrometeusWidgetTable \r\n        model = {ModelSimulation.personneFieldList} \r\n        setErrors = {setErrors} \r\n        formulaireToOpen = {<Avatar src = {'/avatars/icons8-rick-sanchez-24.png'} />}\r\n      />\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}